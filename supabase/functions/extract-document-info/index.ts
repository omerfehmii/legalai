/// <reference types="https://esm.sh/v135/@supabase/functions-js@2.3.1/src/edge-runtime.d.ts" />\n\nimport { serve } from \'https://deno.land/std@0.177.0/http/server.ts\'\nimport { corsHeaders } from \'../_shared/cors.ts\'\n\n// TODO: YOUR_LLM_API_ENDPOINT ve YOUR_LLM_API_KEY_SECRET_NAME değişkenlerini ayarlayın\nconst LLM_API_ENDPOINT = \'YOUR_LLM_API_ENDPOINT\'; // LLM API adresinizi buraya girin\nconst API_KEY_SECRET_NAME = \'YOUR_LLM_API_KEY_SECRET_NAME\'; // Supabase Secrets\'daki anahtar adınız\n\n// Flutter\'dan gönderilecek beklenen alan yapısı (isteğe bağlı, doğrulama için)\ninterface DocumentFieldInfo {\n  key: string;\n  label: string; // Prompt\'ta kullanılabilir\n  // type?: string; // Gerekirse tip bilgisi de eklenebilir\n}\n\nserve(async (req: Request) => {\n  // CORS preflight isteğini işle\n  if (req.method === \'OPTIONS\') {\n    return new Response(\'ok\', { headers: corsHeaders })\n  }\n\n  try {\n    // İstek gövdesinden verileri al\n    const {\n      user_description,\n      template_id, // Hangi şablon için çıkarım yapıldığı (loglama/takip için)\n      fields, // Çıkarılması istenen alanların listesi (DocumentFieldInfo[])\n      extractionPromptHint // Şablona özel ek prompt ipucu (string | null)\n    } = await req.json();\n\n    // Gerekli alanların kontrolü\n    if (!user_description || typeof user_description !== \'string\') {\n      throw new Error(\'Missing or invalid \"user_description\" parameter.\');\n    }\n    if (!template_id || typeof template_id !== \'string\') {\n      throw new Error(\'Missing or invalid \"template_id\" parameter.\');\n    }\n    if (!Array.isArray(fields) || fields.length === 0) {\n      throw new Error(\'Missing or invalid \"fields\" array parameter.\');\n    }\n     // Alan listesinin yapısını doğrula (basit kontrol)\n    if (!fields.every(f => f && typeof f.key === \'string\' && typeof f.label === \'string\')) {\n       throw new Error(\'Invalid structure in \"fields\" array. Each item must have \"key\" and \"label\".\');\n    }\n\n\n    // Supabase Secrets\'tan API anahtarını al\n    const apiKey = Deno.env.get(API_KEY_SECRET_NAME);\n    if (!apiKey) {\n      throw new Error(`API Key secret \"${API_KEY_SECRET_NAME}\" not found.`);\n    }\n\n    // Çıkarılacak alanları LLM prompt\'u için formatla\n    const fieldsToExtractString = fields\n        .map((field: DocumentFieldInfo) => `- ${field.label} (${field.key})`)\n        .join(\'\\n\');\n\n    // LLM için bilgi çıkarımı prompt\'unu oluştur\n    const prompt = `\nRol: Sen bir metinden yapılandırılmış bilgi çıkaran bir yapay zeka asistanısın.\nGörev: Aşağıdaki kullanıcı metninden istenen bilgileri çıkar ve sonucu **yalnızca geçerli bir JSON nesnesi** olarak döndür. JSON anahtarları olarak parantez içindeki \'key\' değerlerini kullan.\nKısıtlamalar:\n- Sadece JSON nesnesini döndür, başka hiçbir açıklama veya metin ekleme.\n- Eğer bir bilgi metinde bulunmuyorsa veya çıkarılamıyorsa, JSON\'daki karşılık gelen değeri null olarak ayarla.\n- Yanıtın kesinlikle geçerli bir JSON formatında olmalı.\n\nİstenen Bilgiler:\n${fieldsToExtractString}\n\n${extractionPromptHint ? `\\nEk Bilgi/İpucu: ${extractionPromptHint}` : \'\'}\n\nKullanıcı Metni:\n\"\"\"\n${user_description}\n\"\"\"\n\nÇıkarılan Bilgiler (JSON):`;\n\n    // LLM API\'sine istek gönder\n    const response = await fetch(LLM_API_ENDPOINT, {\n      method: \'POST\',\n      headers: {\n        \'Content-Type\': \'application/json\',\n        \'Authorization\': `Bearer ${apiKey}`,\n      },\n      body: JSON.stringify({\n        // LLM API\'nizin beklediği payload yapısı (örneğin prompt ve JSON modu isteme)\n        prompt: prompt,\n        max_tokens: 500, // Yanıt JSON içereceği için token limitini ayarlayın\n        temperature: 0.2, // Bilgi çıkarımı için daha düşük sıcaklık genellikle daha iyidir\n        // response_format: { type: \"json_object\" }, // Bazı API\'ler doğrudan JSON çıktısı isteyebilir\n        // model: \"model-adı\"\n      }),\n    });\n\n    if (!response.ok) {\n      const errorBody = await response.text();\n      console.error(\'LLM API Error:\', response.status, errorBody);\n      throw new Error(`LLM API request failed with status ${response.status}`);\n    }\n\n    const responseText = await response.text();\n    let extractedData = {};\n    const errors: string[] = [];\n\n    // LLM yanıtını JSON olarak ayrıştırmaya çalış\n    try {\n      // Yanıtın başında/sonunda olabilecek \`\`\`json ... \`\`\` gibi işaretleri temizle\n      const cleanedResponse = responseText.replace(/^```json\\s*|```$/g, \'\').trim();\n      extractedData = JSON.parse(cleanedResponse);\n\n      // İstenen tüm anahtarların yanıtta olup olmadığını kontrol et (isteğe bağlı)\n      const responseKeys = Object.keys(extractedData);\n      const missingKeys = fields\n        .map((f: DocumentFieldInfo) => f.key)\n        .filter((key: string) => !responseKeys.includes(key));\n\n      if (missingKeys.length > 0) {\n          // Eksik anahtarlar için null değerleri ekleyebiliriz\n          missingKeys.forEach((key: string) => {\n              extractedData[key] = null;\n          });\n          // Veya bir uyarı ekleyebiliriz\n           errors.push(`LLM response did not include expected keys: ${missingKeys.join(\', \')}. They were set to null.`);\n      }\n\n    } catch (parseError) {\n      console.error(\'Failed to parse LLM response as JSON:\', parseError);\n      console.error(\'Raw LLM Response:\', responseText);\n      errors.push(\'Failed to parse LLM response as JSON. Raw response logged.\');\n      // Hatalı durumda boş bir obje veya null döndürebiliriz,\n      // Flutter tarafında bu durumu ele almak gerekir.\n      extractedData = {}; // Veya null\n    }\n\n    // Başarılı (veya kısmen başarılı) yanıtı döndür\n    return new Response(\n      JSON.stringify({\n        extracted_data: extractedData,\n        errors: errors // Ayrıştırma veya eksik anahtar hataları\n      }),\n      {\n        headers: { ...corsHeaders, \'Content-Type\': \'application/json\' },\n        status: 200,\n      }\n    );\n\n  } catch (error) {\n    console.error(\'Error in extract-document-info function:\', error);\n    // Hata yanıtını döndür\n    return new Response(\n      JSON.stringify({\n         extracted_data: null, // Hata durumunda veri yok\n         errors: [error.message]\n      }),\n      {\n        headers: { ...corsHeaders, \'Content-Type\': \'application/json\' },\n        status: 400, // Veya uygun hata kodu\n      }\n    );\n  }\n})\n 